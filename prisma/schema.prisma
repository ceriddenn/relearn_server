// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OauthProvider {
  GOOGLE
  META
}

enum LoginSolution {
  LOCAL
  OAUTH
  SMS
}

model LocalCredentials {
  email    String    @id @unique
  password String
  Account  Account[]
}

model RefreshToken {
  id              String    @id @default(uuid())
  token           String    @unique
  createdAt       DateTime  @default(now())
  revokedAt       DateTime?
  expiresAt       DateTime
  replacedByToken String?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}

enum VerificationCodeType {
  SMS
  EMAIL
}

model VerificationCode {
  id        String               @id @default(cuid())
  type      VerificationCodeType
  code      String
  account   Account?             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String?
}

model Account {
  id                    String            @id @default(cuid())
  loginSolution         LoginSolution
  providerId            String?
  localCredentials      LocalCredentials? @relation(fields: [localCredentialsEmail], references: [email], onDelete: Cascade)
  localCredentialsEmail String?

  oauthProvider    OauthProvider?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastLogout       DateTime?
  user             User[]
  verificationCode VerificationCode[]
}

model User {
  id             String   @id @default(cuid())
  name           String
  phone          String?  @unique
  email          String?  @unique
  emailVerified  Boolean?
  username       String?  @unique
  signupComplete Boolean  @default(false)

  profileSnapshot String?
  account         Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
}
